<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lucas' Secret Base - Blog, Django</title><link href="/" rel="alternate"></link><link href="/feeds/blog-django.atom.xml" rel="self"></link><id>/</id><updated>2021-10-07T23:00:00-06:00</updated><entry><title>Serializers</title><link href="/serializers.html" rel="alternate"></link><published>2021-10-07T23:00:00-06:00</published><updated>2021-10-07T23:00:00-06:00</updated><author><name>Lucas Zeng</name></author><id>tag:None,2021-10-07:/serializers.html</id><summary type="html">&lt;p&gt;Serializer is a class of classes in Django Rest Framework that represents the transformation layer
between the JSON object that goes from and to the end client, and the Python dict that goes from and to the end server. It rejects client if the data does not look good, giving â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Serializer is a class of classes in Django Rest Framework that represents the transformation layer
between the JSON object that goes from and to the end client, and the Python dict that goes from and to the end server. It rejects client if the data does not look good, giving a 400.&lt;/p&gt;
&lt;p&gt;It happened to make me wonder in what situation does the serializing layer also rejects server's data. Facing this curious problem, my brain stopped and rejects any further thinking and came to the conclusion that serializing is done on server and thus it favours server. It also peacefully accepts the possibility that the previous paragraph was not correct.&lt;/p&gt;</content><category term="Blog, Django"></category></entry></feed>